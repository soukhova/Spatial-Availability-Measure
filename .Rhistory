palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white")+
# label = c("1 E -10", "0.247 (1st qu.)", "0.633 (median)", "1.442 (3rd qu.)", "10.081"),
# breaks = c(0.000001 , 0.2470   , 0.6327  , 1.4421 , 10.081)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
# the following saves the plot as a png
plot_TO_osp_i / plot_TO_Vi_BF #/ plot_TO_ai_BF
TO_taz_acc$V_i_BF %>% summary()
plot_TO_Vi_BF <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i_BF),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression('F'[ij]^'t'),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("1 E -10", "0.247 (1st qu.)", "0.633 (median)", "1.442 (3rd qu.)", "10.081"),
breaks = c(0.000001 , 0.2470   , 0.6327  , 1.4421 , 10.081)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
# the following saves the plot as a png
plot_TO_osp_i / plot_TO_Vi_BF #/ plot_TO_ai_BF
plot_TO_Vi_BF <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i_BF),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression('F'[ij]^'t'),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("1 E -10", "0.247 (1st qu.)", "0.633 (median)", "1.442 (3rd qu.)", "10.081"),
breaks = c(0.000001 , 0.2470   , 0.6327  , 1.4421 , 10.08)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
plot_TO_Vi_BF <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i_BF),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression('F'[ij]^'t'),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("1 E -10", "0.247 (1st qu.)", "0.633 (median)", "1.442 (3rd qu.)", "10.081"),
breaks = c(0.01 , 0.2470   , 0.6327  , 1.4421 , 10.08)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
# the following saves the plot as a png
plot_TO_osp_i / plot_TO_Vi_BF #/ plot_TO_ai_BF
plot_TO_Vi_BF <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i_BF),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression('F'[ij]^'t'),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("", "", "", "1.442 (3rd qu.)\n0.633 (median)\n0.247 (1st qu.)\n1 E -10", "10.081"),
breaks = c(0.01 , 0.2470   , 0.6327  , 1.4421 , 10.08)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
# the following saves the plot as a png
plot_TO_osp_i / plot_TO_Vi_BF #/ plot_TO_ai_BF
plot_TO_Vi_BF <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i_BF),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression('F'[ij]^'t'*'='*sum(f(c[ij]),j,J)),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("", "", "", "1.442 (3rd qu.)\n0.633 (median)\n0.247 (1st qu.)\n1 E -10", "10.081"),
breaks = c(0.01 , 0.2470   , 0.6327  , 1.4421 , 10.08)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
# the following saves the plot as a png
plot_TO_osp_i / plot_TO_Vi_BF #/ plot_TO_ai_BF
plot_TO_osp_i <- osp_i %>%
mutate(ratio = osp/total_population) %>%
left_join(TO_taz,
by = c("Origin" = "GTA06")) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = ratio), col = "grey90", size=0.1) + #note: mappping 'ratio' is the same as mapping 'f_i'.
scale_fill_distiller(name = expression('P'[ij]^'*'*'/P'[i]*'='*sum(f(c[ij]),j,J)),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("0.000001", "0.934 (1st Qu.)", "1.510 (median)", "2.214 (3rd Qu.)", "5.064"),
breaks = c(0.001, 0.933648 , 1.509887 , 2.213611 , 5.064)) +
annotation_north_arrow(location = "tr", # north arrow for both the main plot and inset
height = unit(0.5, "cm"),
width = unit(0.5, "cm"),
style = north_arrow_orienteering(line_width = 0.15,
line_col = "dimgrey",
fill = c("white","dimgrey"),
text_size = 5),
which_north = "true") +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
#NOTE: This plot doesn't really make practical sense nor does a plot of the sum_pa (i.e., the denominator of spatial availability) make much practical sense. A high proportion can be awarded to an origin if it 1) does not have any competing origins (so 100% F_p) AND/OR 2) it has a really high population relative to all TAZ in the region AND/OR 3) it has a really favourable TT relative to competing TAZ. Because the balancing factor combines all three of these cases AND doesnt include the magnitude of these cases (that comes from the jobs allocated), it doesn't make much sense as a plot. summing f_p by origin is just a proportion of the population - the same spatial trend as if plotting the workers values. summing f_c by origin could be interesting since the TAZ with the best TT would get the highest score, however, this isn't always the case. Origins with only 1 destination TAZ are assigned 100% f_c because they have a relatively 'perfect' travel time (as they are the only option - so any travel time is 'perfect'). These TAZ typically are small in population/jobs, so when their high f_t (combined f_c and f_p) is multipled by the number of opportunities, they aren't notable to the region.
plot_TO_Vi_BF <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i_BF),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression('F'[ij]^'t'),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("", "", "", "1.442 (3rd qu.)\n0.633 (median)\n0.247 (1st qu.)\n1 E -10", "10.081"),
breaks = c(0.01 , 0.2470   , 0.6327  , 1.4421 , 10.08)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
#NOTE: This plot doesn't make much practical sense
# plot_TO_ai_BF <- TO_taz_acc %>% mutate(a_i_BFeq = ifelse(a_i_BFeq >= 15, 15, a_i_BFeq)) %>%
#   ggplot() +
#   geom_sf(aes(fill = a_i_BFeq),col = "grey90", size=0.1) +
#   scale_fill_distiller(name = "Shen-type balancing factor equivalent",
#                        palette = "BuPu", #legend scale bar,
#                        direction = 1,
#                        na.value = "white")+
#                        # label = c("0", "4.00 (1st Qu.)", "5.89 (median)", "8.31 (3rd Qu.) to 33.99 (max.)"),
#                        # breaks = c(0, 4.00, 5.89, 8.31)) +
#   geom_sf(data = toronto_muni_bound, fill=NA, size=0.5)+ #toronto border
#   geom_sf(data = Toronto_highways, col = "black")+ #highways
#   geom_sf(data = TTC_lines, col = "black", linetype = "dashed")+ #TTC lines
#   annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
#                    location = "br",
#                    height = unit(0.10, "cm"),
#                    line_width = 0.5) +
#   theme_void() +
#   theme(axis.text = element_blank(),
#         legend.key.height = unit(0.3, 'cm'),
#         legend.title = element_blank(),
#         legend.text = element_text(size=8))+
#       coord_sf(crs = crs_string)
# the following saves the plot as a png
plot_TO_osp_i / plot_TO_Vi_BF #/ plot_TO_ai_BF
# ggsave("images/internal-values-plot.png",dpi=700)
10.081*426 =
10.081*426
10.081*426
10.080995*426
0.018517537*4535
10/100000
totalpop_osp <-  osp_i %>% sum(osp)
osp_i$osp %>% sum()
osp_i$total_population %>% sum()
osp_i$total_population %>% sum()
osp_i$osp %>% sum() %>% prettyNum(big.mark = ",")
osp_i$total_population %>% sum()%>% prettyNum(big.mark = ",")
# Spatial availability and the balancing factor
V_i <- V_ij %>%
group_by(Origin) %>%
summarise(V_i = sum(V_ij),
V_i_BF = mean(f_t),
V_i_sum_pa = sum(sum_pa),
i_sum_impedance = sum(sum_impedance),
V_i_f_p = sum(f_p),
V_i_f_c = sum(f_c)) #the proportion of jobs that the origin gets allocated based on all the destinations that origin can access + the competition
# Join all results to traffic analysis zones
TO_taz_acc <- TO_taz %>%
dplyr::select(-c(AREA)) %>%
left_join(osp_i,
by = c("GTA06" = "Origin")) %>%
left_join(S_i,
by = c("GTA06" = "Origin")) %>%
left_join(a_i,
by = c("GTA06" = "Origin")) %>%
left_join(V_i,
by = c("GTA06" = "Origin")) %>%
mutate(#jobs = replace_na(jobs, 0),
s_i = S_i/total_population,
v_i = V_i/total_population,
# Shen=type accessibility in number of jobs after multiplying by total population
A1_i = a_i * total_population,
# Shen=type accessibility in number of jobs after multiplying by opportunity-seeking population
A2_i = a_i * osp)
plot_TO_Vi_BF <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i_BF),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression('F'[ij]^'t'),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("", "", "", "1.442 (3rd qu.)\n0.633 (median)\n0.247 (1st qu.)\n1 E -10", "10.081"),
breaks = c(0.01 , 0.2470   , 0.6327  , 1.4421 , 10.08)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
# the following saves the plot as a png
plot_TO_osp_i / plot_TO_Vi_BF #/ plot_TO_ai_BF
plot_TO_Vi_BF <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i_BF),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression('F'[ij]^'t'),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white")+
# label = c("", "", "", "1.442 (3rd qu.)\n0.633 (median)\n0.247 (1st qu.)\n1 E -10", "10.081"),
# breaks = c(0.01 , 0.2470   , 0.6327  , 1.4421 , 10.08)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
# the following saves the plot as a png
plot_TO_osp_i / plot_TO_Vi_BF #/ plot_TO_ai_BF
V_ij %>% group_by(Origin) %>% summarise(n = n())
t <- V_ij %>% group_by(Origin) %>% summarise(n = n())
View(t)
t$n %>% summary()
# the following saves the plots as a png
plot_TO_Si_rate / plot_TO_taz_jobs_workers / plot_TO_SA_rate
plot_TO_Si_rate <- TO_taz_acc %>% #mutate(s_i = ifelse(s_i >= 3.99793, 3.99793, s_i )) %>%
ggplot() +
geom_sf(aes(fill = s_i),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression("S"[i]~"per worker"),
palette = "RdPu", #legend scale bar,
direction = 1,
na.value = "white",
# trans = "sqrt",
label = c("0.002", "", "", "8.305 (3rd qu.)\n5.891 (median)\n3.998 (1st qu.)", "33.993"),
breaks = c(0.00163, 3.99793, 5.89111  , 8.30510 , 33.99289 )) +
annotation_north_arrow(location = "tr", # north arrow for both the main plot and inset
height = unit(0.5, "cm"),
width = unit(0.5, "cm"),
style = north_arrow_orienteering(line_width = 0.15,
line_col = "dimgrey",
fill = c("white","dimgrey"),
text_size = 5),
which_north = "true") +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.1,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
plot_TO_taz_jobs_workers <- TO_taz %>% mutate(jwork = ifelse(jwork >= 2.052, 2.052, jwork),
jwork = ifelse(jwork ==0, NA, jwork)) %>%
ggplot() +
geom_sf(aes(fill = jwork), col = "grey90", size=0.1) +
scale_fill_distiller(name = "Jobs per worker",
palette = "Reds", #legend scale bar
direction = 1,
na.value = "white",
label = c( "0.003", "", "0.331 (median)\n0.165 (1st qu.)", "0.833 (3rd qu.)", "2.052"),
breaks = c(0.00287 , 0.16538 , 0.33056 , 0.83339 , 2.052)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.1,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
plot_TO_SA_rate <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = v_i),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression("V"[i]~"per worker"),
palette = "RdPu", #legend scale bar,
direction = 1,
na.value = "white",
# trans = "sqrt",
label = c("0.000", "", "0.683 (median)\n0.432 (1st qu.)", "0.988 (3rd qu.)", "2.052"),
breaks = c(0.0001  , 0.4317, 0.6828    , 0.9872   , 2.05)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.1,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
# the following saves the plots as a png
plot_TO_Si_rate / plot_TO_taz_jobs_workers / plot_TO_SA_rate
ggsave("images/access-job-Toronto-plot-rates.png",dpi=700)
# the following saves the plots as a png
plot_TO_Si_rate / plot_TO_taz_jobs_workers / plot_TO_SA_rate
TO_taz_acc$V_i_BF %>% summary()
plot_TO_Vi_BF <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i_BF),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression('F'[ij]^'t'),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("", "", "", "0.0265 (3rd qu.)\n0.0153 (median)\n0.0083 (1st qu.)\n1 E -6", "0.0900"),
breaks = c(0.01 , 0.00829    , 0.01532   , 0.02651  , 0.09)) +
# label = c("", "", "", "1.442 (3rd qu.)\n0.633 (median)\n0.247 (1st qu.)\n1 E -10", "10.081"),
# breaks = c(0.01 , 0.2470   , 0.6327  , 1.4421 , 10.08)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
# the following saves the plot as a png
plot_TO_osp_i / plot_TO_Vi_BF #/ plot_TO_ai_BF
plot_TO_Vi_BF <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i_BF),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression('F'[ij]^'t'),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("1 E -6", "", "", "0.0265 (3rd qu.)\n0.0153 (median)\n0.0083 (1st qu.)", "0.0900"),
breaks = c(0.00001 , 0.00829    , 0.01532   , 0.02651  , 0.09)) +
# label = c("", "", "", "1.442 (3rd qu.)\n0.633 (median)\n0.247 (1st qu.)\n1 E -10", "10.081"),
# breaks = c(0.01 , 0.2470   , 0.6327  , 1.4421 , 10.08)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
# the following saves the plot as a png
plot_TO_osp_i / plot_TO_Vi_BF #/ plot_TO_ai_BF
plot_TO_Vi_BF <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i_BF),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression('F'[ij]^'t'),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("1 E -6", "0.0083 (1st qu.)", "0.0153 (median)", "0.0265 (3rd qu.)", "0.0900"),
breaks = c(0.00001 , 0.00829    , 0.01532   , 0.02651  , 0.09)) +
# label = c("", "", "", "1.442 (3rd qu.)\n0.633 (median)\n0.247 (1st qu.)\n1 E -10", "10.081"),
# breaks = c(0.01 , 0.2470   , 0.6327  , 1.4421 , 10.08)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
# the following saves the plot as a png
plot_TO_osp_i / plot_TO_Vi_BF #/ plot_TO_ai_BF
