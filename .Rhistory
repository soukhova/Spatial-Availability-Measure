fill = c("white","dimgrey"),
text_size = 5),
which_north = "true") +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black",linetype = "dashed", size=0.25)+ #TTC lines
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.position = "none")+
coord_sf(crs = crs_string)+
ylab(expression("O"[j]))
plot_TO_taz_workers <- TO_taz %>% mutate(workers = ifelse(workers == 0, NA, workers),
workers = ifelse(workers >= 6777, 6777, workers)) %>%
ggplot() +
geom_sf(aes(fill = workers), col = "grey90", size=0.1) +
scale_fill_distiller(name = "Workers",
palette = "Oranges", #legend scale bar
direction = 1,
na.value = "white",
label = c("0", "187 (Oj 1st qu.)", "", "486 (Pi 1st qu.)\n426 (Oj med.)", "", "1079 (Oj 3rd qu.)\n1035 (Pi med.) ", "1698 (Pi 3rd qu.)", "27112 (Oj max.) -  \n6777 (Pi max.)"),
breaks = c(0, 187, 426, 486, 1035, 1079, 1698, 6777),
limits = c(0, 6777)) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.height = unit(2, 'cm'),
legend.key.width = unit(0.4,"line"),
legend.position = c(1.15, 1),
legend.title = element_blank(),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)+
ylab(expression("P"[i]))
# the following saves the two plots as a png
plot_TO_taz_jobs / plot_TO_taz_workers
ggsave("images/Fig4.png",dpi=300)
knitr::include_graphics("images/Fig4.png")
plot_TO_taz_tt_mean <- TO_taz %>% mutate(workers = ifelse(tt_mean == 0, NA, tt_mean)) %>%
ggplot() +
geom_sf(aes(fill = tt_mean), col = "grey90", size=0.1) +
scale_fill_distiller(name = "Est. average \ntravel time (min)",
palette = "Greens", #legend scale bar
direction = 1,
na.value = "white",
label = c( "0.00", "11.85 (1st qu.)", "", "17.31 (3rd qu.)\n15.01 (median)", "48.00"),
breaks = c( 0.00, 11.85, 15.01, 17.31, 48.00)) +
annotation_north_arrow(location = "tr", # north arrow for both the main plot and inset
height = unit(0.5, "cm"),
width = unit(0.5, "cm"),
style = north_arrow_orienteering(line_width = 0.15,
line_col = "dimgrey",
fill = c("white","dimgrey"),
text_size = 5),
which_north = "true") +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black",linetype = "dashed", size=0.25)+ #TTC lines
theme_minimal() +
theme(legend.title = element_blank(),
axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.5,"line"),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string) +
ylab("Estimated \navg. TT (min)")
plot_TO_taz_tt_sd <- TO_taz %>% mutate(tt_sd = ifelse(tt_sd >= 10, 10, tt_sd)) %>%
ggplot() +
geom_sf(aes(fill = tt_sd), col = "grey90", size=0.1) +
scale_fill_distiller(name = "Est. travel time SD",
palette = "Greys", #legend scale bar
direction = 1,
na.value = "white",
label = c( "0.71", "5.61 (1st qu.)", "6.46 (median)", "7.36 (3rd qu.)", "10 to 42.02"),
breaks = c(0.707, 5.612, 6.460, 7.357, 10),
limits = c(0.707, 10)) +
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black",linetype = "dashed", size=0.25)+ #TTC lines
theme_minimal() +
theme(legend.title = element_blank(),
axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.5,"line"),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string) +
ylab("Estimated avg. TT \nstandard deviation")
# the following saves the two plots as a png
plot_TO_taz_tt_mean / plot_TO_taz_tt_sd
ggsave("images/Fig5.png",dpi=600)
knitr::include_graphics("images/Fig5.png")
# using fitdist function to fit a distribution using the default maximum likelihood estimation method and Nelder-Mead method for direct optimization
# gamma_ <- fitdistrplus::fitdist(data=all_tt, "gamma", method="mle", optim.method="Nelder-Mead")
# lnorm_ <- fitdistrplus::fitdist(data=all_tt, "lnorm", method="mle", optim.method="Nelder-Mead")
norm_ <-fitdistrplus::fitdist(data=all_tt, "norm", method="mle", optim.method="Nelder-Mead")
#exp_ <- fitdistrplus::fitdist(data=all_tt, "exp", method="mme", optim.method="Brent")
# pois_ <- fitdistrplus::fitdist(data=all_tt, "pois", method="mle", optim.method="Nelder-Mead")
# nbinom_ <- fitdistrplus::fitdist(data=all_tt, "nbinom", method="mle", optim.method="Nelder-Mead")
# geom_ <- fitdistrplus::fitdist(data=all_tt, "geom", method="mle", optim.method="Nelder-Mead")
# beta_ <- fitdistrplus::fitdist(data=all_tt, "beta", method="mle", optim.method="Nelder-Mead")
# logis_ <- fitdistrplus::fitdist(data=all_tt, "logis", method="mle", optim.method="Nelder-Mead")
# plot(gamma_)
# plot(lnorm_)
# plot(pois_)
# plot(nbinom_)
# plot(geom_)
# plot(beta_)
# plot(logis_)
# fitdistrplus::descdist(data=all_tt)
# lnorm_$aic
# norm_$aic #norm has the lowest aic and bic, thus we pick normal distribution.
# gamma_$aic
#
# lnorm_$bic
# norm_$bic
# gamma_$bic
# For some reason plot(norm_) does not play well with knitr, so instead we save the figure and then include it as a graphic in the following chunk
png("images/Fig6.png")
plot(norm_)
dev.off()
knitr::include_graphics("images/Fig6.png")
# f = dgamma(travel_time, gamma_$estimate["shape"], gamma_$estimate["rate"]) #norm dis fits Toronto data better than gamma, this is for full GGH
# transfer calibrated impedance function values to OD matrix
TO_od_ft <- TO_od_ft %>%
mutate(f = dnorm(travel_time, norm_$estimate["mean"], norm_$estimate["sd"]))
#f = dexp(travel_time, exp_$estimate["rate"]))
#f = dgamma(travel_time, gamma_$estimate["shape"], gamma_$estimate["rate"]))
#table with all the accessibility calculations
TO_od_ft <- TO_od_ft %>%
transmute(Origin,
workers,
Destination,
jobs,
travel_time,
f,
workers_f = workers * f, # <-- This is the opportunity-seeking population in Shen-type accessibility
jobs_f = jobs * f) # <- Needed to calculate Hansen-type accessibility
# Level of service for Shen-type accessibility
LOS_j <- TO_od_ft %>%
group_by(Destination) %>%
summarize(R_j = first(jobs)/sum(workers_f),
sum_f_j = (sum(f)),
.groups = "drop")
# Hansen-type accessibility
S_i <- TO_od_ft %>%
group_by(Origin) %>%
summarize(S_i = sum(jobs_f)) # Hansen-type accessibility (unconstrained)
# Shen-type accessibility and 'equivalent' balancing factor in Shen
a_i <- TO_od_ft %>%
left_join(LOS_j,
by = "Destination") %>%
group_by(Origin) %>%
summarize(a_i = sum(R_j * f),  #Shen/2SFCA,
f_i = sum(f), #the sum of impedance at each origin
a_i_BFeq = sum(sum_f_j/workers_f), #the 'equivalent' balancing factor in Shen
.groups = "drop")
# Opportunity seeking population by origin in Shen-type measure
osp_i <- TO_od_ft %>%
group_by(Origin) %>%
summarise(osp = sum(workers_f),
total_population = first(workers),
.groups = "drop")
# Spatial availability disaggregated
V_ij <- TO_od_ft %>% # then Spatial Availability (singly constrained)
mutate(r = 1) %>%
sp_avail_detailed(o_id = Origin,
d_id = Destination, pop = workers, opp = jobs, r = r, f = f, alpha = 1.0) #alpha 1.54
# Spatial availability and the balancing factor
V_i <- V_ij %>%
group_by(Origin) %>%
summarise(V_i = sum(V_ij),
V_i_BF = mean(f_t),
V_i_sum_pa = sum(sum_pa),
i_sum_impedance = sum(sum_impedance),
V_i_f_p = sum(f_p),
V_i_f_c = sum(f_c)) #the proportion of jobs that the origin gets allocated based on all the destinations that origin can access + the competition
V_ij %>%
group_by(Destination) %>%
summarise(V_i = sum(V_ij),
f_t = sum(f_t),
f_c = sum(f_c),
f_p = sum(f_p),
sum_pa = mean(sum_pa),
sum_impedance = mean(sum_impedance)) %>% summary()
# Join all results to traffic analysis zones
TO_taz_acc <- TO_taz %>%
dplyr::select(-c(AREA)) %>%
left_join(osp_i,
by = c("GTA06" = "Origin")) %>%
left_join(S_i,
by = c("GTA06" = "Origin")) %>%
left_join(a_i,
by = c("GTA06" = "Origin")) %>%
left_join(V_i,
by = c("GTA06" = "Origin")) %>%
mutate(#jobs = replace_na(jobs, 0),
s_i = S_i/total_population,
v_i = V_i/total_population,
# Shen=type accessibility in number of jobs after multiplying by total population
A1_i = a_i * total_population,
# Shen=type accessibility in number of jobs after multiplying by opportunity-seeking population
A2_i = a_i * osp)
# Regional total number of jobs (this is the number of jobs in each TAZ in Toronto as defined by the TTS)
TO_taz_acc %>%
st_drop_geometry() %>%
summarize(jobs = sum(jobs))
# Verify that A_i times workers adds up to regional total (there's a discrepency of 3254 jobs here. These jobs exist in Toronto but are taken by workers outside of Toronto and are thus not within the TO_od_ft object.) As a note, the
TO_taz_acc %>%
st_drop_geometry() %>%
#transmute(jobs = A_i * workers) %>%
summarize(jobs = sum(A1_i,
na.rm = TRUE))
# Regional total population
TO_taz_acc %>%
st_drop_geometry() %>%
summarize(workers = sum(workers,
na.rm = TRUE))
# Regional total opportunity-seeking population in Shen-type accessibility
TO_taz_acc %>%
st_drop_geometry() %>%
summarize(workers = sum(osp,
na.rm = TRUE))
# Regional total opportunity-seeking population in spatial availability
TO_taz_acc %>%
st_drop_geometry() %>%
summarize(workers = sum(V_i,
na.rm = TRUE))
plot_TO_AS_i <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = A2_i),col = "grey90", size=0.1) +
scale_fill_distiller(name = "Shen-type accessibility (a_i) x P_ij*",
trans = "sqrt",
palette = "BuPu", #legend scale bar,
direction = 1,
limits = c(0.1, 61079),
na.value = "white")+
annotation_north_arrow(location = "tr", # north arrow for both the main plot and inset
pad_x = unit(0.0, "cm"),
height = unit(0.5, "cm"),
width = unit(0.5, "cm"),
style = north_arrow_orienteering(line_width = 0.15,
line_col = "dimgrey",
fill = c("white","dimgrey"),
text_size = 5),
which_north = "true") +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.position="none",
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+
coord_sf(crs = crs_string)+
ylab(expression("a"[i]*"P"[ij]^'*'))
plot_TO_Si <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = S_i),col = "grey90", size=0.1) +
scale_fill_distiller(name = "Hansen-type accessibility (S_i)",
trans = "sqrt",
palette = "BuPu", #legend scale bar,
direction = 1,
na.value = "white",
label = c("0",
"",
"1193\n(ai Pij* median)\n804\n(Vi median)",
"6922 \n(Si median)",
"12060\n(Vi max.)",
"23194\n(Si max.)",
"61079\n(ai Pij* max.)"),
# label = c("", "804 \n(V_i median) \n1193 \n(a_ixP_ij* median)", "6922 \n(S_i median)", "12060 \n(V_i max.)", "23194 \n(S_i max.)", "61079 \n(a_ixP_ij* max.)"),
breaks = c(0.1, 804, 1193, 6922, 12060, 23194, 61079),
limits = c(0.1, 61079)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.height = unit(3, 'cm'),
legend.key.width = unit(0.4,"line"),
legend.title = element_blank(),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)+
ylab(expression("S"[i]))
plot_TO_SA <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i),col = "grey90", size=0.1) +
scale_fill_distiller(name = "Spatial availability (V_i)",
trans = "sqrt",
palette = "BuPu", #legend scale bar,
direction = 1,
na.value = "white",
limits = c(0.1, 61079))+
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.position="none",
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+
coord_sf(crs = crs_string) +
ylab(expression("V"[i]))
# # the following saves the plots as a png
plot_TO_AS_i / plot_TO_Si / plot_TO_SA
ggsave("images/Fig7.png",dpi=600)
knitr::include_graphics("images/Fig7.png")
plot_TO_osp_i <- osp_i %>%
mutate(ratio = osp/total_population) %>%
left_join(TO_taz,
by = c("Origin" = "GTA06")) %>%
st_sf() %>%
ggplot() +
geom_sf(aes(fill = ratio), col = "grey90", size=0.1) + #note: mappping 'ratio' is the same as mapping 'f_i'.
scale_fill_distiller(name = expression('P'[ij]^'*'*'/P'[i]~'='~sum(f(c[ij]),j,J)),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("<0.001", "0.934 (1st Qu.)", "1.510 (median)", "2.214 (3rd Qu.)", "5.064"),
breaks = c(0.001, 0.933648 , 1.509887 , 2.213611 , 5.064)) +
annotation_north_arrow(location = "tr", # north arrow for both the main plot and inset
height = unit(0.5, "cm"),
width = unit(0.5, "cm"),
style = north_arrow_orienteering(line_width = 0.15,
line_col = "dimgrey",
fill = c("white","dimgrey"),
text_size = 5),
which_north = "true") +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
#Some notes about this plot: The interpretation of this plot is tricky. A high average BF can be awarded to an origin if it 1) does not have any competing origins (so 100% F_p) AND/OR 2) it has a really high population relative to all TAZ in the region AND/OR 3) it has a really favourable TT relative to competing TAZ. Because the balancing factor combines all three of these cases AND doesnt include the magnitude of these cases (that comes from the jobs allocated), it's confusing to understand. summing f_p by origin is just a proportion of the population - the same spatial trend as if plotting the workers values. summing f_c by origin could be interesting since the TAZ with the best TT would get the highest score, however, this isn't always the case. Origins with only 1 destination TAZ are assigned 100% f_c because they have a relatively 'perfect' travel time (as they are the only option - so any travel time is 'perfect'). These TAZ typically are small in population/jobs, so when their high f_t (combined f_c and f_p) is multipled by the number of opportunities, they aren't notable to the region.
plot_TO_Vi_BF <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = V_i_BF),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression('Avg. F'[ij]^'t'),
palette = "YlGn", #legend scale bar,
direction = 1,
na.value = "white",
label = c("<0.001", "0.008 (1st qu.)", "0.015 (median)", "0.027 (3rd qu.)", "0.090"),
breaks = c(0.00001 , 0.00829    , 0.01532   , 0.02651  , 0.09)) +
# label = c("", "", "", "1.442 (3rd qu.)\n0.633 (median)\n0.247 (1st qu.)\n1 E -10", "10.081"),
# breaks = c(0.01 , 0.2470   , 0.6327  , 1.4421 , 10.08)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.3,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
#NOTE: This plot doesn't make much practical sense
# plot_TO_ai_BF <- TO_taz_acc %>% mutate(a_i_BFeq = ifelse(a_i_BFeq >= 15, 15, a_i_BFeq)) %>%
#   ggplot() +
#   geom_sf(aes(fill = a_i_BFeq),col = "grey90", size=0.1) +
#   scale_fill_distiller(name = "Shen-type balancing factor equivalent",
#                        palette = "BuPu", #legend scale bar,
#                        direction = 1,
#                        na.value = "white")+
#                        # label = c("0", "4.00 (1st Qu.)", "5.89 (median)", "8.31 (3rd Qu.) to 33.99 (max.)"),
#                        # breaks = c(0, 4.00, 5.89, 8.31)) +
#   geom_sf(data = toronto_muni_bound, fill=NA, size=0.5)+ #toronto border
#   geom_sf(data = Toronto_highways, col = "black")+ #highways
#   geom_sf(data = TTC_lines, col = "black", linetype = "dashed")+ #TTC lines
#   annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
#                    location = "br",
#                    height = unit(0.10, "cm"),
#                    line_width = 0.5) +
#   theme_void() +
#   theme(axis.text = element_blank(),
#         legend.key.height = unit(0.3, 'cm'),
#         legend.title = element_blank(),
#         legend.text = element_text(size=8))+
#       coord_sf(crs = crs_string)
# the following saves the plot as a png
plot_TO_osp_i / plot_TO_Vi_BF #/ plot_TO_ai_BF
ggsave("images/Fig8.png",dpi=600)
knitr::include_graphics("images/Fig8.png")
effpopTTT <- TO_od_ft %>%
left_join(a_i,
by = "Origin") %>%
mutate(total_travel_time = a_i * workers_f * travel_time) %>%
summarize(total_travel_time = sum(total_travel_time)) %>%
mutate(total_travel_time = units::set_units(total_travel_time,
min) %>%
units::set_units(h))
ViTTT <- V_ij %>%
mutate(total_travel_time = V_ij * travel_time) %>%
summarize(total_travel_time = sum(total_travel_time)) %>%
mutate(total_travel_time = units::set_units(total_travel_time,
min) %>%
units::set_units(h))
plot_TO_Si_rate <- TO_taz_acc %>% #mutate(s_i = ifelse(s_i >= 3.99793, 3.99793, s_i )) %>%
ggplot() +
geom_sf(aes(fill = s_i),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression("S"[i]~"per worker"),
palette = "RdPu", #legend scale bar,
direction = 1,
na.value = "white",
# trans = "sqrt",
label = c("<0.003", "", "", "", "8.31 (3rd qu.)\n5.90 (median)\n4.00 (1st qu.)\n1 (hyp. benchmark)", "33.99"),
breaks = c(0.003, 1, 3.99793, 5.89111  , 8.30510 , 33.99289 )) +
annotation_north_arrow(location = "tr", # north arrow for both the main plot and inset
height = unit(0.5, "cm"),
width = unit(0.5, "cm"),
style = north_arrow_orienteering(line_width = 0.15,
line_col = "dimgrey",
fill = c("white","dimgrey"),
text_size = 5),
which_north = "true") +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.1,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
plot_TO_taz_jobs_workers <- TO_taz %>% mutate(jwork = ifelse(jwork >= 2.052, 2.052, jwork),
jwork = ifelse(jwork ==0, NA, jwork)) %>%
ggplot() +
geom_sf(aes(fill = jwork), col = "grey90", size=0.1) +
scale_fill_distiller(name = "Jobs per worker",
palette = "Reds", #legend scale bar
direction = 1,
na.value = "white",
label = c( " ","0.33 (median)\n0.16 (1st qu.)", "","", "1 (hyp. benchmark)\n0.83 (3rd qu.)", "2.05"),
breaks = c(0.003 , 0.16538 , 0.33056 , 0.83339 , 1, 2.052)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.1,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
plot_TO_SA_rate <- TO_taz_acc %>%
ggplot() +
geom_sf(aes(fill = v_i),col = "grey90", size=0.1) +
scale_fill_distiller(name = expression("V"[i]~"per worker"),
palette = "RdPu", #legend scale bar,
direction = 1,
na.value = "white",
# trans = "sqrt",
label = c("<0.003", "0.68 (median)\n0.43 (1st qu.)", "","", "1 (hyp. benchmark)\n0.99 (3rd qu.)", "2.05"),
breaks = c(0.003  , 0.4317, 0.6828    , 0.9872   , 1, 2.05)) +
geom_sf(data = toronto_muni_bound, fill=NA, size=0.25)+ #toronto border
geom_sf(data = Toronto_highways, col = "black", size=0.25)+ #highways
geom_sf(data = TTC_lines, col = "black", linetype = "dashed", size=0.25)+ #TTC lines
annotation_scale(bar_cols = c("dimgrey", "white"), # scale bar for both the main plot and inset
location = "br",
height = unit(0.10, "cm"),
line_width = 0.5) +
theme_minimal() +
theme(axis.text = element_blank(), #removes lat/long from the axises
panel.grid.major=element_blank(), #removes grid lat/long lines
legend.key.width = unit(0.3,"line"),
legend.key.height = unit(1.1,"line"),
legend.title = element_text(size=9),
legend.text = element_text(size=8),
plot.margin = margin(-0.6, -0.6, -0.6, -0.6, "cm"))+ #expands margins
coord_sf(crs = crs_string)
# the following saves the plots as a png
plot_TO_Si_rate / plot_TO_taz_jobs_workers / plot_TO_SA_rate
ggsave("images/Fig9.png",dpi=600)
knitr::include_graphics("images/Fig9.png")
